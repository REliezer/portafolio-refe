---
import { upperHumanize, markdownify, slugify } from "@lib/textConverter";
import ProjectInfoItem from "./ProjectInfoItem.astro";

interface Props {
    author?: string;
    entryDate?: string;
    categories?: string[];
    github?: { title?: string; link: string }[];
    link?: string;
    resume?: string;
    platform?: Record<string, boolean>;
}

const { author, entryDate, categories, github, link, resume, platform }: Props = Astro.props;
const plataformasActivas = Object.entries(platform || {})
  .filter(([_, value]) => value)
  .map(([key]) => (key));

const platformIcons: Record<string, string> = {
  web: "üåê",
  movil: "üì±",
  nativo: "üñ•Ô∏è",
  pwa: "‚ö°",
  desktop: "üíª",
  api: "üîó",
};

---

<section class="col basis-1/3 p-2 min-w-72 lg:h-[500px]">
    <div class="glass rounded-lg p-2 intersect:animate-fadeUp lg:h-[500px] lg:overflow-y-auto lg:overflow-x-hidden ">
        <!-- Author -->
        {
        author && (
            <ProjectInfoItem
                icon="user"
                title={author}
                url={`/about/`}
            />
        )}
        <!-- Date -->
        {
        entryDate && (
            <ProjectInfoItem
                icon="clock"
                title={entryDate}
            />
        
        )}
        <!-- Platform -->
        {
        platform && (
            <ProjectInfoItem
                icon="folder"
                title="Plataforma"
            />
            <div class="row m-4">
                <div class="col-12 pl-8">
                    <ul class="list-none space-y-1">
                        {plataformasActivas.map((plat) => (
                        <li class="flex items-center">
                            <span class="mr-2" style="list-style: none;">{platformIcons[plat] || "‚ùì"}</span>
                            {upperHumanize(plat)}
                        </li>
                        ))}
                    </ul>
                </div>
            </div>
            )
        }
        <!-- Categories -->
        {
        categories && (
            <ProjectInfoItem
                icon="folder"
                title="Categor√≠as"
            />
            <div class="row m-4">
                <div class="col-12 pl-10">
                {categories?.map((category: string, index: number) => (
                    category ? (
                    <li>
                        <a href={`/projects/categories/${slugify(category)}`} >
                            {upperHumanize(category)}
                        </a>
                    </li>
                    ) : null
                ))}
                </div>
            </div>
        )
        }
        <!-- GitHub -->
        {
        github && (
            <div>
                {github.length <= 2 ? (
                    <!-- Si hay 2 o menos enlaces, mostrar todos directamente -->
                    {github.map((git: { title?: string; link: string }) => (
                        <ProjectInfoItem
                            icon="github"
                            title={git.title ? git.title : "Repositorio GitHub"}
                            url={git.link}
                        />                                      
                    ))}
                ) : (
                    <>
                        {/* Mostrar primeros 2 enlaces */}
                        {github.slice(0, 2).map((git: { title?: string; link: string }) => (
                            <ProjectInfoItem
                                icon="github"
                                title={git.title ? git.title : "Repositorio GitHub"}
                                url={git.link}
                            />                                      
                        ))}
                        <!-- Contenedor colapsable para enlaces adicionales -->
                        <div id="github-expandable" class="github-expandable">
                            <div class="expandable-content" style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease-out;">
                                {github.slice(2).map((git: { title?: string; link: string }) => (
                                    <ProjectInfoItem
                                        icon="github"
                                        title={git.title ? git.title : "Repositorio GitHub"}
                                        url={git.link}
                                    />                                      
                                ))}
                            </div>
                        </div>
                        <!-- Bot√≥n para expandir/contraer -->
                        <div class="ml-4 mt-0">
                            <button 
                                id="github-toggle-btn" 
                                class="text-sm text-[#fbfcf8] hover:text-[#AA367C] hover:underline hover:underline-[#AA367C] hover:cursor-pointer focus:outline-none transition-colors duration-200"
                                type="button"
                            >
                                <span class="expand-text">Ver m√°s repositorios ({github.length - 2})</span>
                                <span class="collapse-text" style="display: none;">Ver menos</span>
                            </button>
                        </div>
                    </>
                )}
            </div>  
        )
        }
        <!-- Link -->
        {
        link && (
            <ProjectInfoItem
                icon="link"
                title="Enlace al proyecto"
                url={link}
            />
        )
        }
        <!-- Description -->
        {
        resume && (
            <div>
            {author ? <hr class="my-2" /> : null}
            <div class="m-4">
                <div set:html={markdownify(resume)} />
            </div>
            </div>
        )
        }
    </div>
</section>

<script>
    // Funcionalidad para expandir/contraer enlaces de GitHub
    document.addEventListener('DOMContentLoaded', function() {
        const toggleBtn = document.getElementById('github-toggle-btn');
        const expandableContainer = document.querySelector('.expandable-content');
        const expandText = document.querySelector('.expand-text');
        const collapseText = document.querySelector('.collapse-text');
        
        if (toggleBtn && expandableContainer && expandText && collapseText) {
            let isExpanded = false;
            
            // Calcular la altura real del contenido
            const getContentHeight = () => {
                const clone = expandableContainer.cloneNode(true);
                clone.style.maxHeight = 'none';
                clone.style.position = 'absolute';
                clone.style.visibility = 'hidden';
                clone.style.height = 'auto';
                document.body.appendChild(clone);
                const height = clone.offsetHeight;
                document.body.removeChild(clone);
                return height;
            };
            
            toggleBtn.addEventListener('click', function() {
                if (!isExpanded) {
                    // Expandir
                    const contentHeight = getContentHeight();
                    expandableContainer.style.maxHeight = contentHeight + 'px';
                    expandText.style.display = 'none';
                    collapseText.style.display = 'inline';
                    isExpanded = true;
                } else {
                    // Contraer
                    expandableContainer.style.maxHeight = '0';
                    expandText.style.display = 'inline';
                    collapseText.style.display = 'none';
                    isExpanded = false;
                }
            });
        }
    });
</script>
